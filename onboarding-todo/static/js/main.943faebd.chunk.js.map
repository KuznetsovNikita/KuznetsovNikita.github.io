{"version":3,"sources":["app/hooks.ts","features/tracker/todos/Task.tsx","features/tracker/todos/TodosList.tsx","app/repository.ts","features/tracker/todos/todosSlice.ts","features/tracker/todos/Todos.tsx","features/tracker/users/UsersList.tsx","features/tracker/users/usersSlice.ts","features/tracker/users/Users.tsx","features/tracker/Tracker.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","Task","React","memo","props","isCompleted","ListItemButton","dense","ListItemIcon","Checkbox","inputProps","checked","ListItemText","primary","title","onClick","onComplete","displayName","TodosList","todos","onCompleted","List","map","todo","completed","id","requestUsers","a","fetchUrl","result","json","requestTodos","userId","input","init","fetch","response","ok","data","Error","message","loadTodosAsync","createAsyncThunk","todoSlice","createSlice","name","initialState","todosMap","todosOrder","status","reducers","completeTodo","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","item","reduce","acc","rejected","actions","selectIsTodosLoading","selectTodos","Todos","isLoading","dispatch","useCallback","UsersList","users","onSelect","selectedUserId","user","ListItem","selected","selectedUser","undefined","loadUsersAsync","trackerSlice","selectUser","selectIsUsersLoading","selectUsers","Users","useEffect","Tracker","Container","Typography","variant","sx","my","Grid","container","spacing","sm","App","store","configureStore","reducer","usersReducer","todosReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.943faebd.chunk.js","sourcesContent":["import {\n  TypedUseSelectorHook,\n  useDispatch,\n  useSelector,\n} from 'react-redux';\nimport type { AppDispatch, RootState } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> =\n  useSelector;\n","import Checkbox from '@mui/material/Checkbox';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport React from 'react';\n\nexport interface UnCompletedTask {\n  title: string;\n  isCompleted: false;\n  onComplete: () => void;\n}\n\nexport interface CompletedTask {\n  title: string;\n  isCompleted: true;\n}\n\nexport type TaskProps = UnCompletedTask | CompletedTask;\n\nexport const Task: React.FC<TaskProps> = React.memo((props) => {\n  if (props.isCompleted) {\n    return (\n      <ListItemButton dense>\n        <ListItemIcon>\n          <Checkbox\n            inputProps={{ 'aria-label': `checkbox` }}\n            checked={props.isCompleted}\n          />\n        </ListItemIcon>\n        <ListItemText primary={props.title} />\n      </ListItemButton>\n    );\n  } else {\n    return (\n      <ListItemButton onClick={props.onComplete} dense>\n        <ListItemIcon>\n          <Checkbox\n            inputProps={{ 'aria-label': `checkbox` }}\n            checked={props.isCompleted}\n          />\n        </ListItemIcon>\n        <ListItemText primary={props.title} />\n      </ListItemButton>\n    );\n  }\n});\n\nTask.displayName = 'Task';\n","import List from '@mui/material/List';\nimport React from 'react';\nimport { ITodo } from '../../../app/model';\nimport { Task } from './Task';\n\ninterface TodosListProps {\n  todos: ITodo[];\n  onCompleted: (todo: ITodo) => void;\n}\n\nexport const TodosList: React.FC<TodosListProps> = React.memo(\n  ({ todos, onCompleted }) => {\n    return (\n      <List>\n        {todos.map((todo) => {\n          const { completed, title, id } = todo;\n          if (completed) {\n            return (\n              <Task key={id} isCompleted={completed} title={title} />\n            );\n          } else {\n            return (\n              <Task\n                key={id}\n                isCompleted={completed}\n                title={title}\n                onComplete={() => onCompleted(todo)}\n              />\n            );\n          }\n        })}\n      </List>\n    );\n  },\n);\n\nTodosList.displayName = 'TodosList';\n","import { ITodo, IUser } from './model';\n\nexport async function requestUsers(): Promise<IUser[]> {\n  const result = await fetchUrl(\n    'https://jsonplaceholder.typicode.com/users',\n  );\n  return await result.json();\n}\n\nexport async function requestTodos(userId: number): Promise<ITodo[]> {\n  const result = await fetchUrl(\n    `https://jsonplaceholder.typicode.com/todos?userId=${userId}`,\n  );\n  return await result.json();\n}\n\nasync function fetchUrl(\n  input: RequestInfo,\n  init?: RequestInit | undefined,\n) {\n  const response = await fetch(input, init);\n  if (response.ok) {\n    return response;\n  } else {\n    const data = await response.json();\n    throw new Error(data.message);\n  }\n}\n","import {\n  createAsyncThunk,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\nimport { ITodo } from '../../../app/model';\nimport { requestTodos } from '../../../app/repository';\nimport { RootState } from '../../../app/store';\n\ninterface Dict<T> {\n  [key: string | number]: T;\n}\n\nexport interface TodosState {\n  todosMap: Dict<ITodo>;\n  todosOrder: number[];\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: TodosState = {\n  todosMap: {},\n  todosOrder: [],\n  status: 'idle',\n};\n\nexport const loadTodosAsync = createAsyncThunk(\n  'todos/load',\n  async (userId: number) => {\n    return await requestTodos(userId);\n  },\n);\n\nexport const todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    completeTodo: (state, action: PayloadAction<ITodo>) => {\n      const todosMap = {\n        ...state.todosMap,\n        [action.payload.id]: { ...action.payload, completed: true },\n      };\n      return {\n        ...state,\n        todosMap,\n      };\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadTodosAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(loadTodosAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.todosOrder = action.payload.map((item) => item.id);\n        state.todosMap = action.payload.reduce((acc, item) => {\n          acc[item.id] = item;\n          return acc;\n        }, {} as Dict<ITodo>);\n      })\n      .addCase(loadTodosAsync.rejected, (state) => {\n        state.status = 'failed';\n      });\n  },\n});\n\nexport const { completeTodo } = todoSlice.actions;\n\nexport const selectIsTodosLoading = (state: RootState) =>\n  state.todo.status === 'loading';\n\nexport const selectTodos = (state: RootState) => {\n  const { todosOrder, todosMap } = state.todo;\n  return todosOrder.map((id) => todosMap[id]);\n};\n\nexport default todoSlice.reducer;\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks';\nimport { ITodo } from '../../../app/model';\nimport { TodosList } from './TodosList';\nimport {\n  completeTodo,\n  selectIsTodosLoading,\n  selectTodos,\n} from './todosSlice';\n\nexport const Todos: React.FC = () => {\n  const todos = useAppSelector(selectTodos);\n  const isLoading = useAppSelector(selectIsTodosLoading);\n\n  const dispatch = useAppDispatch();\n  const onCompleted = React.useCallback(\n    (todo: ITodo) => {\n      dispatch(completeTodo(todo));\n    },\n    [dispatch],\n  );\n\n  if (isLoading) {\n    return <>Loading</>;\n  }\n\n  return <TodosList todos={todos} onCompleted={onCompleted} />;\n};\n","import List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport React from 'react';\nimport { IUser } from '../../../app/model';\n\ninterface UsersListProps {\n  selectedUserId?: number;\n  users: IUser[];\n  onSelect: (user: IUser) => void;\n}\n\nexport const UsersList: React.FC<UsersListProps> = React.memo(\n  ({ users, onSelect, selectedUserId }) => {\n    return (\n      <List>\n        {users.map((user) => {\n          return (\n            <ListItem key={user.id}>\n              <ListItemButton\n                onClick={() => onSelect(user)}\n                selected={user.id === selectedUserId}\n              >\n                {user.name}\n              </ListItemButton>\n            </ListItem>\n          );\n        })}\n      </List>\n    );\n  },\n);\n\nUsersList.displayName = 'UsersList';\n","import {\n  createAsyncThunk,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\nimport { IUser } from '../../../app/model';\nimport { requestUsers } from '../../../app/repository';\nimport { RootState } from '../../../app/store';\n\nexport interface TrackerState {\n  users: IUser[];\n  status: 'idle' | 'loading' | 'failed';\n  selectedUser: IUser | undefined;\n}\n\nconst initialState: TrackerState = {\n  users: [] as IUser[],\n  status: 'idle',\n  selectedUser: undefined,\n};\n\nexport const loadUsersAsync = createAsyncThunk(\n  'users/load',\n  async () => {\n    return await requestUsers();\n  },\n);\n\nexport const trackerSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    selectUser: (state, action: PayloadAction<IUser>) => {\n      return {\n        ...state,\n        selectedUser: action.payload,\n      };\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadUsersAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(loadUsersAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.users = action.payload;\n      })\n      .addCase(loadUsersAsync.rejected, (state) => {\n        state.status = 'failed';\n      });\n  },\n});\n\nexport const { selectUser } = trackerSlice.actions;\n\nexport const selectIsUsersLoading = (state: RootState) =>\n  state.users.status === 'loading';\n\nexport const selectUsers = (state: RootState) => state.users.users;\n\nexport const selectedUserId = (state: RootState) => {\n  const { selectedUser } = state.users;\n  return (selectedUser && selectedUser.id) || undefined;\n};\n\nexport default trackerSlice.reducer;\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks';\nimport { IUser } from '../../../app/model';\nimport { loadTodosAsync } from '../todos/todosSlice';\nimport { UsersList } from './UsersList';\nimport {\n  loadUsersAsync,\n  selectedUserId,\n  selectIsUsersLoading,\n  selectUser,\n  selectUsers,\n} from './usersSlice';\n\nexport const Users = () => {\n  const users = useAppSelector(selectUsers);\n  const isLoading = useAppSelector(selectIsUsersLoading);\n  const selected = useAppSelector(selectedUserId);\n\n  const dispatch = useAppDispatch();\n\n  React.useEffect(() => {\n    dispatch(loadUsersAsync());\n  }, [dispatch]);\n\n  const onSelect = React.useCallback(\n    (user: IUser) => {\n      dispatch(selectUser(user));\n      dispatch(loadTodosAsync(user.id));\n    },\n    [dispatch],\n  );\n\n  if (isLoading) {\n    return <>Loading</>;\n  }\n\n  return (\n    <UsersList\n      onSelect={onSelect}\n      users={users}\n      selectedUserId={selected}\n    />\n  );\n};\n","import { Grid } from '@mui/material';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport React from 'react';\nimport { Todos } from './todos/Todos';\nimport { Users } from './users/Users';\n\nexport const Tracker: React.FC = () => {\n  return (\n    <Container>\n      <Typography variant=\"h3\" sx={{ my: 2 }}>\n        Onboarding tracker\n      </Typography>\n      <Grid container spacing={1}>\n        <Grid item sm={6}>\n          <Users />\n        </Grid>\n        <Grid item sm={6}>\n          <Todos />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n","import React from 'react';\nimport { Tracker } from './features/tracker/Tracker';\n\nconst App: React.FC = () => {\n  return <Tracker />;\n};\n\nexport default App;\n","import {\n  Action,\n  configureStore,\n  ThunkAction,\n} from '@reduxjs/toolkit';\nimport todosReducer from '../features/tracker/todos/todosSlice';\nimport usersReducer from '../features/tracker/users/usersSlice';\n\nexport const store = configureStore({\n  reducer: {\n    users: usersReducer,\n    todo: todosReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}